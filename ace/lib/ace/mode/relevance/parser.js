/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"expression":4,"IF":5,"THEN":6,"ELSE":7,"collection":8,";":9,"tuple":10,"or_expression":11,",":12,"OR":13,"and_expression":14,"AND":15,"relation_expr":16,"sum":17,"RELATION":18,"+":19,"product":20,"-":21,"PRODUCT_OPERATOR":22,"unary":23,"EXISTS":24,"NOT_EXISTS":25,"NOT":26,"cast":27,"AS":28,"PHRASE":29,"r_property":30,"selection":31,"OF":32,"property":33,"->":34,"ITS":35,"index":36,"WHOSE":37,"primary":38,"?":39,"(":40,")":41,"STRING":42,"NUMERAL":43,"IT":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"IF",6:"THEN",7:"ELSE",9:";",12:",",13:"OR",15:"AND",18:"RELATION",19:"+",21:"-",22:"PRODUCT_OPERATOR",24:"EXISTS",25:"NOT_EXISTS",26:"NOT",28:"AS",29:"PHRASE",32:"OF",34:"->",35:"ITS",37:"WHOSE",39:"?",40:"(",41:")",42:"STRING",43:"NUMERAL",44:"IT"},
productions_: [0,[3,1],[4,6],[4,1],[8,3],[8,1],[10,3],[10,1],[11,3],[11,1],[14,3],[14,1],[16,3],[16,1],[17,3],[17,3],[17,1],[20,3],[20,1],[23,2],[23,2],[23,2],[23,2],[23,1],[27,3],[27,1],[30,3],[30,1],[33,3],[33,3],[33,3],[33,2],[33,1],[31,3],[31,1],[31,1],[36,2],[36,1],[36,1],[38,3],[38,1],[38,1],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0];
break;
case 2:this.$ = new yy.IfExp($$[$0-4], $$[$0-2], $$[$0])
break;
case 3:
break;
case 4:this.$ = new yy.Collection($$[$0-2], $$[$0])
break;
case 5:
break;
case 6:this.$ = new yy.Tuple($$[$0-2], $$[$0])
break;
case 7:
break;
case 8:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], 'or')
break;
case 9:
break;
case 10:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], 'and')
break;
case 11:
break;
case 12:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], yy.cleanupKeyword($$[$0-1]))
break;
case 13:
break;
case 14:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], '+')
break;
case 15:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], '-')
break;
case 16:
break;
case 17:this.$ = new yy.BinaryOp($$[$0-2], $$[$0], $$[$0-1])
break;
case 18:
break;
case 19:this.$ = new yy.Unary($$[$0], 'exists')
break;
case 20:this.$ = new yy.Unary($$[$0], 'not exists')
break;
case 21:this.$ = new yy.Unary($$[$0], 'not')
break;
case 22:this.$ = new yy.Unary($$[$0], '-')
break;
case 23:
break;
case 24:this.$ = new yy.Cast($$[$0-2], $$[$0])
break;
case 25:
break;
case 26:this.$ = new yy.Property($$[$0-2], $$[$0])
break;
case 27:
break;
case 28:this.$ = new yy.Property($$[$0], $$[$0-2])
break;
case 29:this.$ = new yy.Unary($$[$0-2], 'exists')
break;
case 30:this.$ = new yy.Unary($$[$0-2], 'not exists')
break;
case 31:this.$ = new yy.Property($$[$0], new yy.It())
break;
case 32:
break;
case 33:this.$ = new yy.Whose($$[$0-2], $$[$0])
break;
case 34:this.$ = new yy.TypeHint()
break;
case 35:
break;
case 36:this.$ = new yy.Phrase($$[$0-1], $$[$0])
break;
case 37:this.$ = new yy.Phrase($$[$0], null)
break;
case 38:
break;
case 39:this.$ = new yy.Parens($$[$0-1])
break;
case 40:this.$ = new yy.String($$[$0])
break;
case 41:this.$ = new yy.Numeral($$[$0])
break;
case 42:this.$ = new yy.It()
break;
}
},
table: [{3:1,4:2,5:[1,3],8:4,10:5,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[3]},{1:[2,1]},{4:29,5:[1,3],8:4,10:5,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,3],6:[2,3],7:[2,3],9:[1,30],41:[2,3]},{1:[2,5],6:[2,5],7:[2,5],9:[2,5],41:[2,5]},{1:[2,7],6:[2,7],7:[2,7],9:[2,7],12:[1,31],13:[1,32],41:[2,7]},{1:[2,9],6:[2,9],7:[2,9],9:[2,9],12:[2,9],13:[2,9],15:[1,33],41:[2,9]},{1:[2,11],6:[2,11],7:[2,11],9:[2,11],12:[2,11],13:[2,11],15:[2,11],41:[2,11]},{1:[2,13],6:[2,13],7:[2,13],9:[2,13],12:[2,13],13:[2,13],15:[2,13],18:[1,34],19:[1,35],21:[1,36],41:[2,13]},{1:[2,16],6:[2,16],7:[2,16],9:[2,16],12:[2,16],13:[2,16],15:[2,16],18:[2,16],19:[2,16],21:[2,16],22:[1,37],41:[2,16]},{1:[2,18],6:[2,18],7:[2,18],9:[2,18],12:[2,18],13:[2,18],15:[2,18],18:[2,18],19:[2,18],21:[2,18],22:[2,18],41:[2,18]},{21:[1,15],23:38,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{21:[1,15],23:39,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{21:[1,15],23:40,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{21:[1,15],23:41,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,23],6:[2,23],7:[2,23],9:[2,23],12:[2,23],13:[2,23],15:[2,23],18:[2,23],19:[2,23],21:[2,23],22:[2,23],28:[1,42],41:[2,23]},{1:[2,25],6:[2,25],7:[2,25],9:[2,25],12:[2,25],13:[2,25],15:[2,25],18:[2,25],19:[2,25],21:[2,25],22:[2,25],28:[2,25],41:[2,25]},{1:[2,32],6:[2,32],7:[2,32],9:[2,32],12:[2,32],13:[2,32],15:[2,32],18:[2,32],19:[2,32],21:[2,32],22:[2,32],28:[2,32],32:[1,43],34:[2,32],41:[2,32]},{1:[2,27],6:[2,27],7:[2,27],9:[2,27],12:[2,27],13:[2,27],15:[2,27],18:[2,27],19:[2,27],21:[2,27],22:[2,27],28:[2,27],34:[1,44],41:[2,27]},{1:[2,35],6:[2,35],7:[2,35],9:[2,35],12:[2,35],13:[2,35],15:[2,35],18:[2,35],19:[2,35],21:[2,35],22:[2,35],28:[2,35],32:[2,35],34:[2,35],37:[1,45],41:[2,35]},{1:[2,34],6:[2,34],7:[2,34],9:[2,34],12:[2,34],13:[2,34],15:[2,34],18:[2,34],19:[2,34],21:[2,34],22:[2,34],28:[2,34],32:[2,34],34:[2,34],41:[2,34]},{29:[1,23],31:46,36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,37],6:[2,37],7:[2,37],9:[2,37],12:[2,37],13:[2,37],15:[2,37],18:[2,37],19:[2,37],21:[2,37],22:[2,37],28:[2,37],32:[2,37],34:[2,37],37:[2,37],38:47,40:[1,25],41:[2,37],42:[1,26],43:[1,27],44:[1,28]},{1:[2,38],6:[2,38],7:[2,38],9:[2,38],12:[2,38],13:[2,38],15:[2,38],18:[2,38],19:[2,38],21:[2,38],22:[2,38],28:[2,38],32:[2,38],34:[2,38],37:[2,38],41:[2,38]},{4:48,5:[1,3],8:4,10:5,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,40],6:[2,40],7:[2,40],9:[2,40],12:[2,40],13:[2,40],15:[2,40],18:[2,40],19:[2,40],21:[2,40],22:[2,40],28:[2,40],32:[2,40],34:[2,40],37:[2,40],41:[2,40]},{1:[2,41],6:[2,41],7:[2,41],9:[2,41],12:[2,41],13:[2,41],15:[2,41],18:[2,41],19:[2,41],21:[2,41],22:[2,41],28:[2,41],32:[2,41],34:[2,41],37:[2,41],41:[2,41]},{1:[2,42],6:[2,42],7:[2,42],9:[2,42],12:[2,42],13:[2,42],15:[2,42],18:[2,42],19:[2,42],21:[2,42],22:[2,42],28:[2,42],32:[2,42],34:[2,42],37:[2,42],41:[2,42]},{6:[1,49]},{10:50,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{10:51,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{14:52,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{16:53,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{17:54,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{20:55,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{20:56,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{21:[1,15],23:57,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,19],6:[2,19],7:[2,19],9:[2,19],12:[2,19],13:[2,19],15:[2,19],18:[2,19],19:[2,19],21:[2,19],22:[2,19],41:[2,19]},{1:[2,20],6:[2,20],7:[2,20],9:[2,20],12:[2,20],13:[2,20],15:[2,20],18:[2,20],19:[2,20],21:[2,20],22:[2,20],41:[2,20]},{1:[2,21],6:[2,21],7:[2,21],9:[2,21],12:[2,21],13:[2,21],15:[2,21],18:[2,21],19:[2,21],21:[2,21],22:[2,21],41:[2,21]},{1:[2,22],6:[2,22],7:[2,22],9:[2,22],12:[2,22],13:[2,22],15:[2,22],18:[2,22],19:[2,22],21:[2,22],22:[2,22],41:[2,22]},{29:[1,58]},{29:[1,23],30:59,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{24:[1,61],25:[1,62],29:[1,23],31:60,36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{38:63,40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,31],6:[2,31],7:[2,31],9:[2,31],12:[2,31],13:[2,31],15:[2,31],18:[2,31],19:[2,31],21:[2,31],22:[2,31],28:[2,31],34:[2,31],41:[2,31]},{1:[2,36],6:[2,36],7:[2,36],9:[2,36],12:[2,36],13:[2,36],15:[2,36],18:[2,36],19:[2,36],21:[2,36],22:[2,36],28:[2,36],32:[2,36],34:[2,36],37:[2,36],41:[2,36]},{41:[1,64]},{4:65,5:[1,3],8:4,10:5,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,4],6:[2,4],7:[2,4],9:[2,4],41:[2,4]},{1:[2,6],6:[2,6],7:[2,6],9:[2,6],41:[2,6]},{1:[2,8],6:[2,8],7:[2,8],9:[2,8],12:[2,8],13:[2,8],15:[1,33],41:[2,8]},{1:[2,10],6:[2,10],7:[2,10],9:[2,10],12:[2,10],13:[2,10],15:[2,10],41:[2,10]},{1:[2,12],6:[2,12],7:[2,12],9:[2,12],12:[2,12],13:[2,12],15:[2,12],19:[1,35],21:[1,36],41:[2,12]},{1:[2,14],6:[2,14],7:[2,14],9:[2,14],12:[2,14],13:[2,14],15:[2,14],18:[2,14],19:[2,14],21:[2,14],22:[1,37],41:[2,14]},{1:[2,15],6:[2,15],7:[2,15],9:[2,15],12:[2,15],13:[2,15],15:[2,15],18:[2,15],19:[2,15],21:[2,15],22:[1,37],41:[2,15]},{1:[2,17],6:[2,17],7:[2,17],9:[2,17],12:[2,17],13:[2,17],15:[2,17],18:[2,17],19:[2,17],21:[2,17],22:[2,17],41:[2,17]},{1:[2,24],6:[2,24],7:[2,24],9:[2,24],12:[2,24],13:[2,24],15:[2,24],18:[2,24],19:[2,24],21:[2,24],22:[2,24],28:[2,24],41:[2,24]},{1:[2,26],6:[2,26],7:[2,26],9:[2,26],12:[2,26],13:[2,26],15:[2,26],18:[2,26],19:[2,26],21:[2,26],22:[2,26],28:[2,26],41:[2,26]},{1:[2,28],6:[2,28],7:[2,28],9:[2,28],12:[2,28],13:[2,28],15:[2,28],18:[2,28],19:[2,28],21:[2,28],22:[2,28],28:[2,28],34:[2,28],41:[2,28]},{1:[2,29],6:[2,29],7:[2,29],9:[2,29],12:[2,29],13:[2,29],15:[2,29],18:[2,29],19:[2,29],21:[2,29],22:[2,29],28:[2,29],34:[2,29],41:[2,29]},{1:[2,30],6:[2,30],7:[2,30],9:[2,30],12:[2,30],13:[2,30],15:[2,30],18:[2,30],19:[2,30],21:[2,30],22:[2,30],28:[2,30],34:[2,30],41:[2,30]},{1:[2,33],6:[2,33],7:[2,33],9:[2,33],12:[2,33],13:[2,33],15:[2,33],18:[2,33],19:[2,33],21:[2,33],22:[2,33],28:[2,33],32:[2,33],34:[2,33],41:[2,33]},{1:[2,39],6:[2,39],7:[2,39],9:[2,39],12:[2,39],13:[2,39],15:[2,39],18:[2,39],19:[2,39],21:[2,39],22:[2,39],28:[2,39],32:[2,39],34:[2,39],37:[2,39],41:[2,39]},{7:[1,66]},{4:67,5:[1,3],8:4,10:5,11:6,14:7,16:8,17:9,20:10,21:[1,15],23:11,24:[1,12],25:[1,13],26:[1,14],27:16,29:[1,23],30:17,31:18,33:19,35:[1,22],36:20,38:24,39:[1,21],40:[1,25],42:[1,26],43:[1,27],44:[1,28]},{1:[2,2],6:[2,2],7:[2,2],41:[2,2]}],
defaultActions: {2:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 25;
break;
case 2:return 24;
break;
case 3:return 18;
break;
case 4:return 26;
break;
case 5:return 35;
break;
case 6:return 44;
break;
case 7:return 37;
break;
case 8:return 28;
break;
case 9:return 32;
break;
case 10:return 15;
break;
case 11:return 13;
break;
case 12:return 5;
break;
case 13:return 6;
break;
case 14:return 7;
break;
case 15:return 19;
break;
case 16:return 34;
break;
case 17:return 21;
break;
case 18:return 40;
break;
case 19:return 41;
break;
case 20:return 9;
break;
case 21:return 12;
break;
case 22:return 22;
break;
case 23:return 43;
break;
case 24:return 42;
break;
case 25:return 29;
break;
case 26:return 39;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$?(there-do-not-exist|there-does-not-exist|there-exist-no|there-exists-no|exists-no|exist-no))/,/^(?:\$?(there-exists|there-exist|exists|exist))/,/^(?:\$?(does-not-end-with|ends-with|does-not-start-with|starts-with|is-not-contained-by|is-contained-by|does-not-contain|is-not-greater-than-or-equal-to|is-greater-than-or-equal-to|is-not-less-than-or-equal-to|is-less-than-or-equal-to|is-not-less-than|is-less-than|is-not-greater-than|is-greater-than|is-equal-to|is-not-equal-to|is-not|is|does-not-equal|equals|contains|\!=|>=|<=|>|<|=))/,/^(?:\$not)/,/^(?:\$its)/,/^(?:\$it)/,/^(?:\$whose)/,/^(?:\$as)/,/^(?:\$of)/,/^(?:\$and)/,/^(?:\$or)/,/^(?:\$if)/,/^(?:\$then)/,/^(?:\$else)/,/^(?:\+)/,/^(?:->|'s?|\.)/,/^(?:-)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:\*|\/|\$mod|&)/,/^(?:[0-9]+)/,/^(?:"[^"]*")/,/^(?:[a-zA-Z\s]*[a-zA-Z])/,/^(?:\?)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
