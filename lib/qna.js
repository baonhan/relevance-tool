// Generated by CoffeeScript 1.9.3
(function() {
  var childProcess, fs, qnaCommand, qnaInputFile, qnaPath, test;

  fs = require('fs');

  childProcess = require("child_process");

  qnaPath = "/Library/BESAgent/BESAgent.app/Contents/MacOS/QnA";

  qnaInputFile = "/tmp/input.qna";

  qnaCommand = qnaPath + " -showtypes " + qnaInputFile;

  exports["eval"] = function(rel, cb) {
    var qnaContent;
    qnaContent = "q: " + rel;
    return fs.writeFile(qnaInputFile, qnaContent, function(err) {
      if (err) {
        console.error("Error writing to file " + qnaInputFile + "\n" + err);
        return cb;
      } else {
        return childProcess.exec(qnaCommand, function(error, stdout, stderr) {
          var answers, relErr, results, type;
          results = stdout;
          if (relErr = results.match(/^E: (.+)$/m)) {
            var type = null, typeMatch;
            if (typeMatch = results.match(/^I: (.+)$/m)) {
              type = typeMatch[1];
            }
            return cb([], type, relErr[1]);
          } else {
            answers = results.match(/^A: .+$/gm);
            if (answers instanceof Array) {
              answers = answers.map(function(a) {
                return a.substr(3);
              });
            }
            if (answers === null) {
              answers = [];
            }
            type = results.match(/^I: (.+)$/m)[1];
            return cb(answers, type);
          }
        });
      }
    });
  };

  exports.propertiesOf = function(type, cb) {
    var q;
    q = "properties of (type \"" + type + "\"; parents of type \"" + type + "\")";
    return exports["eval"](q, function(answers, t) {
      var properties;
      properties = answers.map(function(a) {
        return a.match(/^(.+) of <.+>:.+$/)[1];
      }).map(function(p) {
        var args, propName;
        if (p.match(/</)) {
          propName = p.match(/^(.+)\s</)[1];
          args = p.match(/<(.+)>/)[1];
          if (p.match(/\((.+)\)>/)) {
            args = p.match(/\((.+)\)>/)[1];
          }
          args = args.split(",").map(function(a) {
            return a.trim();
          });
          return [propName, args];
        } else {
          return [p, []];
        }
      });
      return cb(properties);
    });
  };

  test = function() {
    exports["eval"]("now", function(answers, type) {
       exports.propertiesOf(type, function(props) {
        console.log(props);
      });
    });
  };

}).call(this);
